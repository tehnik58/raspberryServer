üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞: –≠–º—É–ª—è—Ç–æ—Ä Raspberry Pi –¥–ª—è Web
üéØ –û–±–∑–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
–í–µ–±-—ç–º—É–ª—è—Ç–æ—Ä Raspberry Pi - —ç—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥ Python –¥–ª—è Raspberry Pi –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ä–∞–±–æ—Ç—ã GPIO –ø–∏–Ω–æ–≤ –∏ –¥–∞—Ç—á–∏–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.

üåü –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞ –¥–ª—è Raspberry Pi –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ä–µ–¥–µ

–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è GPIO –ø–∏–Ω–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

–≠–º—É–ª—è—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ –∏ –ø–µ—Ä–∏—Ñ–µ—Ä–∏–π–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
text
raspberry-emulator-web/
‚îú‚îÄ‚îÄ üìÅ backend/                    # –°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å (FastAPI)
‚îÇ   ‚îú‚îÄ‚îÄ üê≥ Dockerfile             # Docker-–æ–±—Ä–∞–∑ –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
‚îÇ   ‚îú‚îÄ‚îÄ üê≥ main.py                # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª FastAPI
‚îÇ   ‚îú‚îÄ‚îÄ üê≥ websocket_manager.py   # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
‚îÇ   ‚îú‚îÄ‚îÄ üê≥ docker_manager.py      # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
‚îÇ   ‚îú‚îÄ‚îÄ üê≥ gpio_emulator.py       # –≠–º—É–ª—è—Ü–∏—è GPIO –∏ –¥–∞—Ç—á–∏–∫–æ–≤
‚îÇ   ‚îî‚îÄ‚îÄ üê≥ requirements.txt       # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
‚îú‚îÄ‚îÄ üìÅ frontend/                  # –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ index.html            # –û—Å–Ω–æ–≤–Ω–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ style.css             # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ script.js             # –û—Å–Ω–æ–≤–Ω–∞—è JavaScript –ª–æ–≥–∏–∫–∞
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ components.js         # –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ websocket-client.js   # WebSocket –∫–ª–∏–µ–Ω—Ç
‚îú‚îÄ‚îÄ üìÅ emulation-docker/         # Docker –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ RPi
‚îÇ   ‚îú‚îÄ‚îÄ üê≥ Dockerfile            # –û–±—Ä–∞–∑ —Å —ç–º—É–ª—è—Ü–∏–µ–π Raspberry Pi
‚îÇ   ‚îú‚îÄ‚îÄ üê≥ custom_gpio.py        # –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è GPIO
‚îÇ   ‚îú‚îÄ‚îÄ üê≥ custom_components.py  # –≠–º—É–ª—è—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
‚îÇ   ‚îú‚îÄ‚îÄ üê≥ runner.py             # –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–¥–∞
‚îÇ   ‚îî‚îÄ‚îÄ üê≥ test_script.py        # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
‚îú‚îÄ‚îÄ üê≥ docker-compose.yml        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker Compose
‚îú‚îÄ‚îÄ üê≥ .gitignore
‚îî‚îÄ‚îÄ üìÑ README.md                 # –≠—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
Docker (–≤–µ—Ä—Å–∏—è 20.10.0+)

Docker Compose (–≤–µ—Ä—Å–∏—è 1.29.0+)

Python 3.9+ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)

–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫
–ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–æ–µ–∫—Ç:

bash
git clone <repository-url>
cd raspberry-emulator-web
–°–æ–±–µ—Ä–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:

bash
docker-compose up -d --build
–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:

text
http://localhost:8000
–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:

bash
docker-compose down
üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
Backend (FastAPI)
FastAPI - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫

WebSocket - —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

Docker SDK - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞

Uvicorn - ASGI —Å–µ—Ä–≤–µ—Ä

Frontend (JavaScript/HTML/CSS)
Vanilla JavaScript - –±–µ–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã

WebSocket API - –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º

CSS Grid/Flexbox - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞

ES6+ - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π JavaScript

–≠–º—É–ª—è—Ü–∏—è
–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è RPi.GPIO - —ç–º—É–ª—è—Ü–∏—è GPIO –ø–∏–Ω–æ–≤

Docker –∏–∑–æ–ª—è—Ü–∏—è - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞

–†–µ–∞–ª—å–Ω—ã–π time execution - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏

üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
bash
DOCKER_HOST=unix:///var/run/docker.sock  # Docker socket
PYTHONUNBUFFERED=1                       # –ù–µ–±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
–ü–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
Backend API: 8000

WebSocket: ws://localhost:8000/ws/execute

üíª –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
1. –ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞
–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ Python –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ:

python
import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BCM)
GPIO.setup(18, GPIO.OUT)

try:
    for i in range(10):
        GPIO.output(18, GPIO.HIGH)
        time.sleep(0.5)
        GPIO.output(18, GPIO.LOW)
        time.sleep(0.5)
finally:
    GPIO.cleanup()
2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
–ù–∞–∂–º–∏—Ç–µ "‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å" –¥–ª—è –∑–∞–ø—É—Å–∫–∞

–ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º GPIO –ø–∏–Ω–æ–≤ –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–µ

3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

üßπ –û—á–∏—Å—Ç–∏—Ç—å - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∞

üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
GPIO –ø–∏–Ω—ã
üî¥ –ö—Ä–∞—Å–Ω—ã–π - –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

üü¢ –ó–µ–ª–µ–Ω—ã–π - –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (HIGH)

–ê–Ω–∏–º–∞—Ü–∏—è - –ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π

–î–∞—Ç—á–∏–∫–∏
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ ¬∞C

–í–ª–∞–∂–Ω–æ—Å—Ç—å - –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤ %

–î–∏—Å—Ç–∞–Ω—Ü–∏—è - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ cm

‚öôÔ∏è API Endpoints
WebSocket (/ws/execute)
javascript
// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
{
  "type": "execute",
  "code": "python code here"
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
{
  "type": "stop"
}
–û—Ç–≤–µ—Ç—ã WebSocket
javascript
// –í—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
{"type": "output", "content": "message"}

// –û—à–∏–±–∫–∞
{"type": "error", "content": "error message"}

// –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
{"type": "execution_started", "message": "started"}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
{"type": "execution_completed", "message": "completed"}

üêõ –û—Ç–ª–∞–¥–∫–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
bash
# –õ–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞
docker-compose logs backend

# –õ–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
docker-compose logs -f backend

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
docker-compose ps
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
bash
# –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket
curl -i -N -H "Connection: Upgrade" -H "Upgrade: websocket" http://localhost:8000/ws/execute

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
curl http://localhost:8000/static/style.css
üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ production
1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
nginx
server {
    listen 80;
    server_name your-domain.com;

    location / {
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL
bash
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Let's Encrypt
certbot --nginx -d your-domain.com