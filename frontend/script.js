document.addEventListener('DOMContentLoaded', function() {
    console.log('–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
    const codeTextarea = document.getElementById('python-code');
    const runButton = document.getElementById('run-btn');
    const stopButton = document.getElementById('stop-btn');
    const clearButton = document.getElementById('clear-btn');
    const outputConsole = document.getElementById('output-console');
    const statusElement = document.getElementById('status');
    
    let websocket = null;
    const serverUrl = 'ws://' + window.location.hostname + ':8000/ws/execute';
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
function handleWebSocketMessage(message) {
    switch (message.type) {
        case 'output':
            addMessage(message.content);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º GPIO —Å–æ–±—ã—Ç–∏—è
            detectGPIOEvents(message.content);
            break;
            
        case 'error':
            addMessage(`‚ùå –û—à–∏–±–∫–∞: ${message.content}`, 'error');
            break;
            
        case 'execution_started':
            addMessage('üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å');
            runButton.disabled = true;
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if (window.gpioVisualizer) {
                window.gpioVisualizer.resetAllPins();
            }
            break;
            
        case 'execution_completed':
            addMessage('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            runButton.disabled = false;
            break;
            
        default:
            console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è GPIO —Å–æ–±—ã—Ç–∏–π
function detectGPIOEvents(output) {
    if (!window.gpioVisualizer) return;

    const gpioOutputMatch = output.match(/GPIO (\d+) output: (True|False)/i);
    const gpioSetupMatch = output.match(/GPIO (\d+) setup as (OUT|IN)/i);

    if (gpioOutputMatch) {
        const pin = parseInt(gpioOutputMatch[1]);
        const state = gpioOutputMatch[2].toLowerCase() === 'true';
        window.gpioVisualizer.updatePinState(pin, state, 'output');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if (websocket && websocket.readyState === WebSocket.OPEN) {
            websocket.send(JSON.stringify({
                type: 'gpio_state_update',
                pin: pin,
                state: state,
                mode: 'output'
            }));
        }
    }
    
    if (gpioSetupMatch) {
        const pin = parseInt(gpioSetupMatch[1]);
        const mode = gpioSetupMatch[2];
        window.gpioVisualizer.setPinMode(pin, mode.toLowerCase());
        addMessage(`üìå GPIO ${pin} –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ ${mode === 'OUT' ? '–≤—ã—Ö–æ–¥' : '–≤—Ö–æ–¥'}`);
    }
}
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å
    function addMessage(message, type = 'info') {
        const messageElement = document.createElement('div');
        messageElement.className = 'console-' + type;
        messageElement.textContent = message;
        outputConsole.appendChild(messageElement);
        outputConsole.scrollTop = outputConsole.scrollHeight;
        console.log('Console:', message);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    function updateStatus(text, className) {
        statusElement.textContent = text;
        statusElement.className = className;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
    function connectWebSocket() {
        try {
            console.log('–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket...');
            websocket = new WebSocket(serverUrl);
            
            websocket.onopen = function() {
                console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                updateStatus('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ', 'connected');
                addMessage('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            };
            
            websocket.onmessage = function(event) {
                try {
                    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);
                    const message = JSON.parse(event.data);
                    
                    switch (message.type) {
                        case 'output':
                            addMessage(message.content);
                            break;
                        case 'error':
                            addMessage('‚ùå –û—à–∏–±–∫–∞: ' + message.content, 'error');
                            break;
                        case 'execution_started':
                            addMessage('üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å');
                            runButton.disabled = true;
                            break;
                        case 'execution_completed':
                            addMessage('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                            runButton.disabled = false;
                            break;
                        default:
                            addMessage('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ' + message.type);
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                    addMessage('–ü–æ–ª—É—á–µ–Ω–æ: ' + event.data);
                }
            };
            
            websocket.onclose = function() {
                console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
                updateStatus('‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ', 'disconnected');
                addMessage('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ');
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(connectWebSocket, 3000);
            };
            
            websocket.onerror = function(error) {
                console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
                updateStatus('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'disconnected');
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
            updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'disconnected');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    function executeCode() {
        const code = codeTextarea.value.trim();
        if (!code) {
            addMessage('‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π –∫–æ–¥', 'error');
            return;
        }
        
        if (!websocket || websocket.readyState !== WebSocket.OPEN) {
            addMessage('‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
            return;
        }
        
        addMessage('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...');
        
        try {
            websocket.send(JSON.stringify({
                type: 'execute',
                code: code
            }));
        } catch (error) {
            addMessage('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + error, 'error');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    function stopExecution() {
        if (websocket && websocket.readyState === WebSocket.OPEN) {
            websocket.send(JSON.stringify({
                type: 'stop'
            }));
            addMessage('‚èπÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—ã–≤–æ–¥–∞
    function clearOutput() {
        outputConsole.innerHTML = '';
        addMessage('–ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞');
    }
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    runButton.addEventListener('click', executeCode);
    stopButton.addEventListener('click', stopExecution);
    clearButton.addEventListener('click', clearOutput);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    console.log('–ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã:', {
        run: runButton,
        stop: stopButton,
        clear: clearButton
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connectWebSocket();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    addMessage('–≠–º—É–ª—è—Ç–æ—Ä Raspberry Pi –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    addMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ Python –∏ –Ω–∞–∂–º–∏—Ç–µ "–í—ã–ø–æ–ª–Ω–∏—Ç—å"');
});