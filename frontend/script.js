document.addEventListener('DOMContentLoaded', function() {
    console.log('–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
    const codeTextarea = document.getElementById('python-code');
    const runButton = document.getElementById('run-btn');
    const stopButton = document.getElementById('stop-btn');
    const clearButton = document.getElementById('clear-btn');
    const saveButton = document.getElementById('save-btn');
    const loadButton = document.getElementById('load-btn');
    const themeToggle = document.getElementById('theme-toggle');
    const helpBtn = document.getElementById('help-btn');
    const outputConsole = document.getElementById('output-console');
    const statusElement = document.getElementById('status');
    const connectionTimeElement = document.getElementById('connection-time');
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    const modal = document.getElementById('help-modal');
    const closeModal = document.querySelector('.close');
    
    let websocket = null;
    let connectionStartTime = null;
    let connectionTimer = null;
    const serverUrl = 'ws://' + window.location.hostname + ':8000/ws/execute';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
    const currentTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', currentTheme);
    themeToggle.textContent = currentTheme === 'light' ? 'üåô –¢—ë–º–Ω–∞—è' : '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if (window.gpioVisualizer) {
        window.gpioVisualizer.initGPIOComponents();
    }
    
    if (window.motorVisualizer) {
        window.motorVisualizer.initMotorControls();
    }
    
    if (window.busVisualizer) {
        window.busVisualizer.initBusDevices();
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    function handleWebSocketMessage(message) {
        switch (message.type) {
            case 'output':
                addMessage(message.content);
                detectHardwareEvents(message.content);
                break;
                
            case 'error':
                addMessage(`‚ùå –û—à–∏–±–∫–∞: ${message.content}`, 'error');
                break;
                
            case 'execution_started':
                addMessage('üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å');
                runButton.disabled = true;
                if (window.gpioVisualizer) {
                    window.gpioVisualizer.resetAllPins();
                }
                break;
                
            case 'execution_completed':
                addMessage('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                runButton.disabled = false;
                break;
                
            case 'gpio_state_update':
                if (window.gpioVisualizer) {
                    window.gpioVisualizer.updatePinState(
                        message.pin, 
                        message.state, 
                        message.mode
                    );
                }
                break;
                
            case 'pwm_state_update':
                if (window.gpioVisualizer) {
                    window.gpioVisualizer.updatePWMState(
                        message.pin, 
                        message.duty_cycle, 
                        message.frequency
                    );
                }
                break;
                
            case 'motor_state_update':
                if (window.motorVisualizer) {
                    window.motorVisualizer.updateMotor(
                        message.name,
                        message.speed,
                        message.direction
                    );
                }
                break;
                
            case 'sensor_data_update':
                if (window.sensorVisualizer) {
                    window.sensorVisualizer.updateSensorValue(
                        message.sensor,
                        message.value,
                        message.unit
                    );
                }
                break;
                
            case 'emu_event':
                handleEmuEvent(message.event);
                break;
                
            case 'pwm_control_response':
                addMessage(`‚úÖ PWM —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø–∏–Ω–∞ ${message.pin}`);
                break;
                
            default:
                console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —ç–º—É–ª—è—Ü–∏–∏
    function handleEmuEvent(event) {
        switch (event.type) {
            case 'pwm_event':
                handlePWMEvent(event);
                break;
            case 'spi_event':
                handleSPIEvent(event);
                break;
            case 'i2c_event':
                handleI2CEvent(event);
                break;
            default:
                console.log('Unknown emulation event:', event);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ PWM —Å–æ–±—ã—Ç–∏–π
    function handlePWMEvent(event) {
        if (!window.pwmVisualizer) {
            window.pwmVisualizer = new PWMVisualizer('pwm-visualization');
        }
        
        switch (event.event) {
            case 'init':
                window.pwmVisualizer.addPWM(event.pin, event.frequency);
                addMessage(`üìä PWM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø–∏–Ω–µ ${event.pin}, —á–∞—Å—Ç–æ—Ç–∞ ${event.frequency}Hz`);
                break;
            case 'start':
                window.pwmVisualizer.updatePWM(event.pin, event.duty_cycle, event.frequency);
                addMessage(`üöÄ PWM –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–∏–Ω–µ ${event.pin}, —Å–∫–≤–∞–∂–Ω–æ—Å—Ç—å ${event.duty_cycle}%`);
                break;
            case 'duty_change':
                window.pwmVisualizer.updatePWMDuty(event.pin, event.duty_cycle);
                addMessage(`üìà PWM —Å–∫–≤–∞–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ –ø–∏–Ω–µ ${event.pin}: ${event.duty_cycle}%`);
                break;
            case 'freq_change':
                window.pwmVisualizer.updatePWMFrequency(event.pin, event.frequency);
                addMessage(`üì∂ PWM —á–∞—Å—Ç–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ –ø–∏–Ω–µ ${event.pin}: ${event.frequency}Hz`);
                break;
            case 'stop':
                window.pwmVisualizer.removePWM(event.pin);
                addMessage(`‚èπÔ∏è PWM –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø–∏–Ω–µ ${event.pin}`);
                break;
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ SPI —Å–æ–±—ã—Ç–∏–π
    function handleSPIEvent(event) {
        if (!window.busVisualizer) {
            window.busVisualizer = new BusVisualizer('spi-devices', 'i2c-devices');
        }
        
        switch (event.event) {
            case 'open':
                window.busVisualizer.addSPIDevice(event.bus, event.device, 'SPI Device');
                addMessage(`üîå SPI —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç–æ: bus ${event.bus}, device ${event.device}`);
                break;
            case 'transfer':
                window.busVisualizer.updateSPIActivity(event.bus, event.device, true);
                addMessage(`üì§ SPI –ø–µ—Ä–µ–¥–∞—á–∞: bus ${event.bus}, device ${event.device}, –¥–∞–Ω–Ω—ã–µ: [${event.data}]`);
                // –ß–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                setTimeout(() => {
                    window.busVisualizer.updateSPIActivity(event.bus, event.device, false);
                }, 1000);
                break;
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ I2C —Å–æ–±—ã—Ç–∏–π
    function handleI2CEvent(event) {
        if (!window.busVisualizer) {
            window.busVisualizer = new BusVisualizer('spi-devices', 'i2c-devices');
        }
        
        switch (event.event) {
            case 'read':
                window.busVisualizer.updateI2CActivity(event.address, true);
                window.busVisualizer.updateI2COperation(
                    event.address, 
                    event.event, 
                    event.register, 
                    event.value
                );
                addMessage(`üìñ I2C —á—Ç–µ–Ω–∏–µ: –∞–¥—Ä–µ—Å 0x${event.address.toString(16)}, —Ä–µ–≥–∏—Å—Ç—Ä 0x${event.register.toString(16)}, –∑–Ω–∞—á–µ–Ω–∏–µ 0x${event.value.toString(16)}`);
                setTimeout(() => {
                    window.busVisualizer.updateI2CActivity(event.address, false);
                }, 1000);
                break;
            case 'write':
                window.busVisualizer.updateI2CActivity(event.address, true);
                window.busVisualizer.updateI2COperation(
                    event.address, 
                    event.event, 
                    event.register, 
                    event.value
                );
                addMessage(`üìù I2C –∑–∞–ø–∏—Å—å: –∞–¥—Ä–µ—Å 0x${event.address.toString(16)}, —Ä–µ–≥–∏—Å—Ç—Ä 0x${event.register.toString(16)}, –∑–Ω–∞—á–µ–Ω–∏–µ 0x${event.value.toString(16)}`);
                setTimeout(() => {
                    window.busVisualizer.updateI2CActivity(event.address, false);
                }, 1000);
                break;
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    function detectHardwareEvents(output) {
        if (!window.gpioVisualizer) return;
        
        // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ GPIO —Å–æ–±—ã—Ç–∏–π
        const gpioOutputMatch = output.match(/GPIO (\d+) output: (True|False)/i);
        const gpioSetupMatch = output.match(/GPIO (\d+) setup as (OUT|IN)/i);
        const pwmMatch = output.match(/PWM.*pin (\d+).*duty cycle (\d+)%/i);
        const motorMatch = output.match(/Motor (\w+).*speed set to (-?\d+)%/i);
        
        if (gpioOutputMatch) {
            const pin = parseInt(gpioOutputMatch[1]);
            const state = gpioOutputMatch[2].toLowerCase() === 'true';
            window.gpioVisualizer.updatePinState(pin, state, 'output');
        }
        
        if (gpioSetupMatch) {
            const pin = parseInt(gpioSetupMatch[1]);
            const mode = gpioSetupMatch[2];
            window.gpioVisualizer.setPinMode(pin, mode.toLowerCase());
        }
        
        if (pwmMatch) {
            const pin = parseInt(pwmMatch[1]);
            const dutyCycle = parseInt(pwmMatch[2]);
            window.gpioVisualizer.updatePWMState(pin, dutyCycle, 100);
        }
        
        if (motorMatch) {
            const name = motorMatch[1];
            const speed = parseInt(motorMatch[2]);
            if (window.motorVisualizer) {
                window.motorVisualizer.updateMotor(name, speed, speed >= 0 ? 1 : -1);
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å
    function addMessage(message, type = 'info') {
        const messageElement = document.createElement('div');
        messageElement.className = 'console-' + type;
        messageElement.textContent = message;
        outputConsole.appendChild(messageElement);
        outputConsole.scrollTop = outputConsole.scrollHeight;
        console.log('Console:', message);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    function updateStatus(text, className) {
        statusElement.textContent = text;
        statusElement.className = className;
        
        if (className === 'connected') {
            connectionStartTime = new Date();
            startConnectionTimer();
        } else {
            stopConnectionTimer();
        }
    }
    
    // –¢–∞–π–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    function startConnectionTimer() {
        stopConnectionTimer();
        connectionTimer = setInterval(() => {
            const now = new Date();
            const diff = now - connectionStartTime;
            const hours = Math.floor(diff / 3600000);
            const minutes = Math.floor((diff % 3600000) / 60000);
            const seconds = Math.floor((diff % 60000) / 1000);
            
            connectionTimeElement.textContent = 
                `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }, 1000);
    }
    
    function stopConnectionTimer() {
        if (connectionTimer) {
            clearInterval(connectionTimer);
            connectionTimer = null;
        }
        connectionTimeElement.textContent = '00:00:00';
    }
    
    // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
    function connectWebSocket() {
        try {
            console.log('–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket...');
            websocket = new WebSocket(serverUrl);
            
            websocket.onopen = function() {
                console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                updateStatus('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ', 'connected');
                addMessage('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            };
            
            websocket.onmessage = function(event) {
                try {
                    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);
                    const message = JSON.parse(event.data);
                    handleWebSocketMessage(message);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                    addMessage('–ü–æ–ª—É—á–µ–Ω–æ: ' + event.data);
                }
            };
            
            websocket.onclose = function() {
                console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
                updateStatus('‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ', 'disconnected');
                addMessage('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ');
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(connectWebSocket, 3000);
            };
            
            websocket.onerror = function(error) {
                console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
                updateStatus('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'disconnected');
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
            updateStatus('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'disconnected');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    function executeCode() {
        const code = codeTextarea.value.trim();
        if (!code) {
            addMessage('‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π –∫–æ–¥', 'error');
            return;
        }
        
        if (!websocket || websocket.readyState !== WebSocket.OPEN) {
            addMessage('‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
            return;
        }
        
        addMessage('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...');
        
        try {
            websocket.send(JSON.stringify({
                type: 'execute',
                code: code
            }));
        } catch (error) {
            addMessage('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + error, 'error');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    function stopExecution() {
        if (websocket && websocket.readyState === WebSocket.OPEN) {
            websocket.send(JSON.stringify({
                type: 'stop'
            }));
            addMessage('‚èπÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—ã–≤–æ–¥–∞
    function clearOutput() {
        outputConsole.innerHTML = '';
        addMessage('–ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞');
    }
    
    // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    function saveCode() {
        const code = codeTextarea.value;
        localStorage.setItem('saved_code', code);
        addMessage('üíæ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    }
    
    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–∞
    function loadCode() {
        const savedCode = localStorage.getItem('saved_code');
        if (savedCode) {
            codeTextarea.value = savedCode;
            addMessage('üìÇ –ö–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
        } else {
            addMessage('‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞', 'error');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
    function toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        
        themeToggle.textContent = newTheme === 'light' ? 'üåô –¢—ë–º–Ω–∞—è' : '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è';
        addMessage(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newTheme === 'light' ? '—Å–≤–µ—Ç–ª—É—é' : '—Ç—ë–º–Ω—É—é'}`);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
    function switchTab(tabName) {
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        tabButtons.forEach(btn => btn.classList.remove('active'));
        tabContents.forEach(content => content.classList.remove('active'));
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
        document.getElementById(`${tabName}-tab`).classList.add('active');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PWM –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É SPI/I2C
        if (tabName === 'spi-i2c' && !window.pwmVisualizer) {
            window.pwmVisualizer = new PWMVisualizer('pwm-visualization');
        }
    }
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    runButton.addEventListener('click', executeCode);
    stopButton.addEventListener('click', stopExecution);
    clearButton.addEventListener('click', clearOutput);
    saveButton.addEventListener('click', saveCode);
    loadButton.addEventListener('click', loadCode);
    themeToggle.addEventListener('click', toggleTheme);
    helpBtn.addEventListener('click', () => modal.style.display = 'block');
    closeModal.addEventListener('click', () => modal.style.display = 'none');
    
    window.addEventListener('click', (event) => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
    
    tabButtons.forEach(btn => {
        btn.addEventListener('click', () => switchTab(btn.dataset.tab));
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connectWebSocket();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    addMessage('–≠–º—É–ª—è—Ç–æ—Ä Raspberry Pi –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    addMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ Python –∏ –Ω–∞–∂–º–∏—Ç–µ "–í—ã–ø–æ–ª–Ω–∏—Ç—å"');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –µ—Å—Ç—å
    const savedCode = localStorage.getItem('saved_code');
    if (savedCode) {
        codeTextarea.value = savedCode;
    }
});