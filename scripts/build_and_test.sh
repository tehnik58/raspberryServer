#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Raspberry Pi Simulator
set -e  # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "=== Raspberry Pi Simulator Build and Test Script ==="

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
        exit 1
    fi
    print_status "Docker –æ–±–Ω–∞—Ä—É–∂–µ–Ω: $(docker --version)"
}

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
build_code_runner_image() {
    print_status "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python –∫–æ–¥–∞..."
    
    cd docker-images/python-code-runner
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ scripts
    cp ../../scripts/run_code.py ./
    
    if docker build -t raspberry-python-runner . ; then
        print_status "Docker –æ–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!"
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é —Å–∫—Ä–∏–ø—Ç–∞
        rm -f run_code.py
    else
        print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ Docker –æ–±—Ä–∞–∑–∞!"
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é —Å–∫—Ä–∏–ø—Ç–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        rm -f run_code.py
        exit 1
    fi
    
    cd ../..
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    print_status "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    if curl -s http://localhost:8000/health > /dev/null; then
        print_status "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–ø—É—Å–∫ WebSocket —Ç–µ—Å—Ç–æ–≤..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker
        docker_available=false
        if docker info > /dev/null 2>&1; then
            docker_available=True
            print_status "Docker –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            print_warning "Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏"
        fi
        
        # –¢–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        python3 -c "
import asyncio
import websockets
import json
import sys

async def test_websocket():
    try:
        uri = 'ws://localhost:8000/api/ws/test-client-123'
        async with websockets.connect(uri) as websocket:
            # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º
            welcome_response = await websocket.recv()
            print('‚úÖ Connection established:', welcome_response)
            
            # –¢–µ—Å—Ç ping
            await websocket.send(json.dumps({'type': 'ping', 'timestamp': 'test'}))
            ping_response = await websocket.recv()
            print('‚úÖ Ping test passed:', ping_response)
            
            # –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Docker –¥–æ—Å—Ç—É–ø–µ–Ω)
            if $docker_available:
                test_code = '''
import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BCM)
GPIO.setup(18, GPIO.OUT)

try:
    for i in range(3):
        GPIO.output(18, GPIO.HIGH)
        print('LED ON')
        time.sleep(0.5)
        GPIO.output(18, GPIO.LOW)
        print('LED OFF')
        time.sleep(0.5)
finally:
    GPIO.cleanup()
    print('Cleanup completed')
'''
                await websocket.send(json.dumps({
                    'type': 'code_execution', 
                    'code': test_code
                }))
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
                received_messages = 0
                max_messages = 20
                
                while received_messages < max_messages:
                    try:
                        response = await asyncio.wait_for(websocket.recv(), timeout=15.0)
                        data = json.loads(response)
                        
                        if data.get('type') == 'log':
                            print(f'üìù Log: {data[\"message\"]}')
                            received_messages += 1
                        elif data.get('type') == 'status':
                            print(f'üìä Status: {data[\"message\"]}')
                            received_messages += 1
                        elif data.get('type') == 'gpio_update':
                            print(f'üîå GPIO Update: Pin {data[\"pin\"]} = {data[\"value\"]}')
                            received_messages += 1
                        elif data.get('type') == 'connection_established':
                            pass
                        elif data.get('type') == 'error':
                            print(f'‚ùå Error: {data[\"message\"]}')
                            received_messages += 1
                            break
                        else:
                            print(f'üì® Other: {response}')
                            received_messages += 1
                            
                        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏, –≤—ã—Ö–æ–¥–∏–º
                        if 'completed' in data.get('message', '').lower() or 'error' in data.get('type', ''):
                            break
                            
                    except asyncio.TimeoutError:
                        print('‚ùå Timeout waiting for message')
                        break
                
                if received_messages > 0:
                    print('‚úÖ Code execution test completed')
                else:
                    print('‚ùå No messages received during code execution test')
            else:
                print('‚ö†Ô∏è Docker not available, skipping code execution test')
            
    except Exception as e:
        print(f'‚ùå WebSocket test failed: {e}')
        import traceback
        traceback.print_exc()
        sys.exit(1)

asyncio.run(test_websocket())
        "
    else
        print_warning "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º WebSocket —Ç–µ—Å—Ç—ã"
        print_status "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPIO –∑–∞–≥–ª—É—à–∫–∏
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPIO –∑–∞–≥–ª—É—à–∫–∏
test_gpio_stub() {
    print_status "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPIO –∑–∞–≥–ª—É—à–∫–∏..."
    
    cd docker-images/python-code-runner
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ GPIO –∑–∞–≥–ª—É—à–∫–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if docker run --rm -it raspberry-python-runner python -c "
import sys
sys.path.append('/home/user/.local/lib/python3.9/site-packages')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–º–µ–Ω—è–µ—Ç RPi.GPIO
import fake_rpi.gpio

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RPi.GPIO (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à—É –∑–∞–≥–ª—É—à–∫—É)
import RPi.GPIO as GPIO

# –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
GPIO.setmode(GPIO.BCM)
print('‚úÖ setmode test passed')

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OUTPUT —Ä–µ–∂–∏–º–∞
GPIO.setup(18, GPIO.OUT)
print('‚úÖ setup OUTPUT test passed')

GPIO.output(18, GPIO.HIGH)
print('‚úÖ output HIGH test passed')

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ INPUT —Ä–µ–∂–∏–º–∞
GPIO.setup(17, GPIO.IN)
print('‚úÖ setup INPUT test passed')

value = GPIO.input(17)
print(f'‚úÖ input test passed: Pin 17 value = {value}')

# –¢–µ—Å—Ç PWM
pwm = GPIO.PWM(18, 100)
pwm.start(50)
print('‚úÖ PWM start test passed')

pwm.ChangeDutyCycle(75)
print('‚úÖ PWM change duty cycle test passed')

pwm.stop()
print('‚úÖ PWM stop test passed')

GPIO.cleanup()
print('‚úÖ cleanup test passed')

print('‚úÖ All GPIO tests completed successfully')
    "; then
        print_status "GPIO –∑–∞–≥–ª—É—à–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    else
        print_error "–û—à–∏–±–∫–∞ –≤ GPIO –∑–∞–≥–ª—É—à–∫–µ!"
        exit 1
    fi
    
    cd ../..
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
        exit 1
    fi
    print_status "Docker –æ–±–Ω–∞—Ä—É–∂–µ–Ω: $(docker --version)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker –¥–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if ! docker info > /dev/null 2>&1; then
        print_error "Docker –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞."
        print_status "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: sudo systemctl start docker"
        print_status "–ò –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker: sudo usermod -aG docker $USER"
        print_status "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æÂèØËÉΩÈúÄË¶Å –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
        exit 1
    fi
    print_status "Docker –¥–µ–º–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω"
}

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–∫—Ä–∏–ø—Ç
check_circular_imports() {
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤..."
    
    if python -c "
import ast
import sys
from pathlib import Path

def find_circular_imports(file_path):
    with open(file_path, 'r') as file:
        tree = ast.parse(file.read())
    
    imports = set()
    for node in ast.walk(tree):
        if isinstance(node, ast.Import):
            for alias in node.names:
                imports.add(alias.name)
        elif isinstance(node, ast.ImportFrom):
            if node.module:
                imports.add(node.module)
    
    return imports

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
app_path = Path('app')
for py_file in app_path.rglob('*.py'):
    if py_file.name != '__init__.py':
        imports = find_circular_imports(py_file)
        print(f'File: {py_file}, Imports: {imports}')
        
print('‚úÖ Circular imports check completed')
    "; then
        print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else
        print_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏"
        exit 1
    fi
}

main() {
    print_status "–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_docker
    check_circular_imports
    check_docker
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    build_code_runner_image
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_gpio_stub
    run_tests
    
    print_status "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    print_status "–°–±–æ—Ä–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã."
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main